### cursor-instruction.txt

**Project Description**  
We are building modular utility libraries for Next.js projects compatible with versions 13, 14, and 15, using React versions 18 and 19.
These libraries will include utilities, hooks, and helpers that integrate seamlessly with the Next.js App Router.
The libraries will also leverage Firebase (version 10) and Firebase Admin for authentication and server-side operations.  

**Objective**  
To create reusable, type-safe, and efficient utilities and components that simplify development and ensure compatibility with modern Next.js and React features. 
**Firebase configuration will be fully controlled by us and not exposed to users.
** Users will be able to bring  their Firebase configurations in .env.local file.  

**Tools and Frameworks to Use**  
1. **TypeScript**  
   - Purpose: Ensures type safety, better developer experience, and robust code.  
2. **Rollup or ESBuild**  
   - Purpose: For lightweight and efficient bundling of the libraries.  
   - Recommendation: Use Rollup for flexibility and ESBuild for speed during development.  
3. **Storybook**  
   - Purpose: Document and showcase reusable UI components for better developer onboarding and testing.  
4. **Firebase (version 10)**  
   - Purpose: Handle client-side authentication and database interactions.  
   - Firebase configuration will be securely stored and accessed via an API to avoid exposure in the package.  
5. **Firebase Admin**  
   - Purpose: Manage server-side authentication and administrative tasks, ensuring secure operations.  
6. **Jest and React Testing Library**  
   - Purpose: Unit and integration testing for all utilities and components.  
7. **ESLint and Prettier**  
   - Purpose: Ensure code consistency and maintain coding standards across the project.  
8. **Vite**  
   - Purpose: For blazing-fast development and local testing. Use this for Storybook and isolated module testing.  

**Firebase Configuration Control**  
- During development, Firebase configurations will be saved in an `.env` file.  
- In the published package, Firebase configurations will be accessed via a secure API endpoint hosted by us.  
- The library will use this API endpoint to retrieve the necessary Firebase credentials, ensuring users have no direct access to the configurations.  

**Implementation Strategy for Firebase Configuration**  
1. **During Development**  
   - Use `.env.local` files for storing Firebase credentials.  
   - Ensure `.env.local` is excluded from version control using `.gitignore`.  
2. **For Production/Distribution**  
   - Host a secure API endpoint that provides the Firebase configuration dynamically.  
   - In the library, create a utility function that fetches the configuration from the API.  
   - Cache the configuration locally in memory to minimize API requests.  
3. **API Design**  
   - Require authentication tokens or keys for accessing the API endpoint.  
   - Ensure the API only provides the necessary Firebase configuration securely without exposing sensitive details.  

**Key Features to Implement**  
- Modular structure separating client and server actions.  
- Proper usage of `use client` and `use server` directives for Next.js compatibility.  
- Firebase integration for both client and server using the API to fetch configuration.  
- A robust build pipeline with Rollup or ESBuild for producing optimized and tree-shakable output.  
- Comprehensive documentation with Storybook to display and test UI components.  

**Development Workflow**  
1. Set up the development environment with the listed tools.  
2. Use TypeScript for all modules to ensure strong typing and easy debugging.  
3. Maintain clear separation of client and server actions using Next.js conventions.  
4. Integrate Firebase configuration fetching via API.  
5. Document components and utilities using Storybook.  
6. Test every feature using Jest and React Testing Library.  
7. Bundle and optimize the library with Rollup or ESBuild for NPM publishing.  

**Collaborative Editing with Cursor Editor**  
- Enable Cursor Editor for real-time collaboration and AI-powered suggestions.  
- Use it to refine TypeScript types, optimize imports, and ensure modular code structure.  
- Ensure documentation and testing are comprehensive before finalizing any library module.  

**Output**  
The final output will be a reusable, well-documented NPM library compatible with the latest Next.js and React versions, providing seamless Firebase integration and optimized utilities for developers. Firebase configuration will be securely managed and accessed via a dedicated API to ensure control and security.  